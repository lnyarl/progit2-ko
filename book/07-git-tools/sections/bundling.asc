[[_bundling]]
///////////
=== Bundling
///////////
=== Bundle

///////////
Though we've covered the common ways to transfer Git data over a network (HTTP, SSH, etc), there is actually one more way to do so that is not commonly used but can actually be quite useful.
///////////
앞에서 Git 데이터를 네트워크를 거쳐 전송하는 일반적인 방법(HTTP, SSH등)을 다루었었다. 그런데 사실 일반적으로 사용하진 않지만 꽤 유용한 방법이 하나 더 있다.

///////////
Git is capable of ``bundling'' it's data into a single file. This can be useful in various scenarios. Maybe your network is down and you want to send changes to your co-workers. Perhaps you're working somewhere offsite and don't have access to the local network for security reasons. Maybe your wireless/ethernet card just broke.  Maybe you don't have access to a shared server for the moment, you want to email someone updates and you don't want to transfer 40 commits via `format-patch`.
///////////
Git에서는 ``Bundle''이란 것이 있다. 데이터를 하나의 파일에 몰아넣는 것이다. 이 방법은 많은 경우에 유용하게 사용할 수 있다. 네트워크가 불통인데 변경사항을 동료에게 보낼 때. 출장을 나갔는데 보안상의 이유로 로컬 네트워크에 접속하지 못할 때. 통신 인터페이스 장비가 부서졌을 때. 갑자기 잠시동안 공용 서버에 접근하지 못할 때. 그리고 누군가에게 수정사항을 이메일로 보내거나 40개 씩이나 되는 커밋을 `format-patch`로 보내고 싶지 않을 때.

///////////
This is where the `git bundle` command can be helpful. The `bundle` command will package up everything that would normally be pushed over the wire with a `git push` command into a binary file that you can email to someone or put on a flash drive, then unbundle into another repository.
///////////
바로 이럴 때 `git bundle`이 한 줄기 빛이 되어준다. `bundle` 명령어는 보통 `git push`명령으로 올려보낼 모든 것을 감싸서 하나의 바이너리 파일로 만든다. 이 파일을 이메일로 보내거나 USB로 다른 사람에게 보내서 다른 저장소에 Unbundle한다.

///////////
Let's see a simple example. Let's say you have a repository with two commits:
///////////
간단한 예제를 보자. 이 저장소에는 두 개의 커밋이 있다.

[source,console]
----
$ git log
commit 9a466c572fe88b195efd356c3f2bbeccdb504102
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:10 2010 -0800

    second commit

commit b1ec3248f39900d2a406049d762aa68e9641be25
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:01 2010 -0800

    first commit
----

///////////
If you want to send that repository to someone and you don't have access to a repository to push to, or simply don't want to set one up, you can bundle it with `git bundle create`.
///////////
이 저장소를 다른 사람에게 통째로 보내고 싶은데 그 사람의 저장소에 Push할 권한이 없거나, 그냥 Push하고싶지 않을 때, `git bundle create`로 Bundle을 만들 수 있다.

[source,console]
----
$ git bundle create repo.bundle HEAD master
Counting objects: 6, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 441 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
----

///////////
Now you have a file named `repo.bundle` that has all the data needed to re-create the repository's `master` branch. With the `bundle` command you need to list out every reference or specific range of commits that you want to be included. If you intend for this to be cloned somewhere else, you should add HEAD as a reference as well as we've done here.
///////////
그렇게 `repo.bundle`이라는 이름의 파일을 가지게 되었다. 파일에는 이 저장소의 `master`브랜치를 다시 만드는데에 필요한 모든 정보다 들어있다. `bundle` 명령어로 모든 레퍼런스나 Bundle에 포함되어야 하는 특정 구간의 커밋을 지정할 수 있다. 이 Bundle을 다른 곳에서 Clone하려고 한다면 위에서 한 것 처럼 HEAD 레퍼런스를 포함해야 한다.

///////////
You can email this `repo.bundle` file to someone else, or put it on a USB drive and walk it over.
///////////
`repo.bundle`파일을 다른 사람에게 이메일로 전송하거나 USB 드라이브에 담아 가지고 나갈 수 있다.

///////////
On the other side, say you are sent this `repo.bundle` file and want to work on the project. You can clone from the binary file into a directory, much like you would from a URL.
///////////
아니면 `repo.bundle`을 일하려는 곳으로 가져간다. 이 바이너리 파일을 마치 URL에서 가져온것 처럼 Clone해서 사용할 수 있다.

[source,console]
----
$ git clone repo.bundle repo
Initialized empty Git repository in /private/tmp/bundle/repo/.git/
$ cd repo
$ git log --oneline
9a466c5 second commit
b1ec324 first commit
----

///////////
If you don't include HEAD in the references, you have to also specify `-b master` or whatever branch is included because otherwise it won't know what branch to check out.
///////////
Bundle에 HEAD레퍼런스를 포함하지 않았으면, `-b master`를 써주거나 어떠한 브랜치든 포함시켜야 한다. 그렇지 않으면 어떠한 브랜치로 Checkout할지 알 수 없기 때문이다.

///////////
Now let's say you do three commits on it and want to send the new commits back via a bundle on a USB stick or email.
///////////
이제 세 개의 커밋을 가지고 있고 여기에 USB나 이메일로 받은 Bundle에서 새로운 커밋을 넣어보자

[source,console]
----
$ git log --oneline
71b84da last commit - second repo
c99cf5b fourth commit - second repo
7011d3d third commit - second repo
9a466c5 second commit
b1ec324 first commit
----

///////////
First we need to determine the range of commits we want to include in the bundle. Unlike the network protocols which figure out the minimum set of data to transfer over the network for us, we'll have to figure this out manually.  Now, you could just do the same thing and bundle the entire repository, which will work, but it's better to just bundle up the difference - just the three commits we just made locally.
///////////
먼저 Bundle에 추가할 커밋의 범위를 정해야한다. 전송할 최소한의 데이터를 알아서 인식하는 네트워크 프로토콜과는 달리 Bundle은 수동으로 지정해야 한다. 이제 전체 저장소를 Bundle로 만들수 있지만 전달하고자 하는 곳과 다른 것만 Bundle로 묶는게 좋다. 여기선 로컬에서 만든 세개의 커밋만 묶는다.

///////////
In order to do that, you'll have to calculate the difference. As we described in <<_commit_ranges>>, you can specify a range of commits in a number of ways. To get the three commits that we have in our master branch that weren't in the branch we originally cloned, we can use something like `origin/master..master` or `master ^origin/master`. You can test that with the `log` command.
///////////
그러기 위해서는 다른 점을 찾아내야 한다. <<_commit_ranges>>에서 기술했듯이 숫자로 커밋의 범위를 지정할 수 있다. 원래 Clone한 브랜치인 master에는 없던 세 개의 커밋을 얻어내려면 `origin/master..master`나 `master ^origin//master`라고 쓰면 된다. `log`명령어로 시험해볼 수 있다.

[source,console]
----
$ git log --oneline master ^origin/master
71b84da last commit - second repo
c99cf5b fourth commit - second repo
7011d3d third commit - second repo
----

///////////
So now that we have the list of commits we want to include in the bundle, let's bundle them up. We do that with the `git bundle create` command, giving it a filename we want our bundle to be and the range of commits we want to go into it.
///////////
이제 Bundle에 포함할 커밋을 얻었으니 이들을 묶어보자. `git bundle create` 멍령어에 Bundle 파일의 이름과 묶어넣을 커밋의 범위를 지정한다.

[source,console]
----
$ git bundle create commits.bundle master ^9a466c5
Counting objects: 11, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (9/9), 775 bytes, done.
Total 9 (delta 0), reused 0 (delta 0)
----

///////////
Now we have a `commits.bundle` file in our directory. If we take that and send it to our partner, she can then import it into the original repository, even if more work has been done there in the meantime.
///////////
이제 디렉터리에 `commits.bundle`파일이 생겼다. 이 파일을 동료에게 보내면 원래의 저장소에 일이 얼마나 진행되었든 간에 파일 내용을 적용할 수 있다. 

///////////
When she gets the bundle, she can inspect it to see what it contains before she imports it into her repository.  The first command is the `bundle verify` command that will make sure the file is actually a valid Git bundle and that you have all the neccesary ancestors to reconstitute it properly.
///////////
이 Bundle을 동료가 받았으면 원래 저장소에 적용하기 전에 안에 무엇이 들어있는지 살펴볼 수 있다. 우선 `bundle verify`명령어로 파일이 올바른 Git Bundle인가 확인한다. 그리고 제대로 적용하기 위해 필요한 모든 조상들을 확인한다.

[source,console]
----
$ git bundle verify ../commits.bundle
The bundle contains 1 ref
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
The bundle requires these 1 ref
9a466c572fe88b195efd356c3f2bbeccdb504102 second commit
../commits.bundle is okay
----

///////////
If the bundler had created a bundle of just the last two commits they had done, rather than all three, the original repository would not be able to import it, since it is missing requisite history.  The `verify` command would have looked like this instead:
///////////

[source,console]
----
$ git bundle verify ../commits-bad.bundle
error: Repository lacks these prerequisite commits:
error: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 third commit - second repo
----

However, our first bundle is valid, so we can fetch in commits from it.  If you want to see what branches are in the bundle that can be imported, there is also a command to just list the heads:

[source,console]
----
$ git bundle list-heads ../commits.bundle
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
----

The `verify` sub-command will tell you the heads as well.  The point is to see what can be pulled in, so you can use the `fetch` or `pull` commands to import commits from this bundle.  Here we'll fetch the 'master' branch of the bundle to a branch named 'other-master' in our repository:

[source,console]
----
$ git fetch ../commits.bundle master:other-master
From ../commits.bundle
 * [new branch]      master     -> other-master
----

Now we can see that we have the imported commits on the 'other-master' branch as well as any commits we've done in the meantime in our own 'master' branch.

[source,console]
----
$ git log --oneline --decorate --graph --all
* 8255d41 (HEAD, master) third commit - first repo
| * 71b84da (other-master) last commit - second repo
| * c99cf5b fourth commit - second repo
| * 7011d3d third commit - second repo
|/
* 9a466c5 second commit
* b1ec324 first commit
----

So, `git bundle` can be really useful for sharing or doing network-type operations when you don't have the proper network or shared repository to do so.
